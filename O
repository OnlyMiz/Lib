	-- Simple UI Library

local PlayerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
local library = {}

--- Create a new UI library instance
function library.new(name)
	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = name or "UI Library"
	screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
	screenGui.ResetOnSpawn = false
	screenGui.Parent = PlayerGui

	local self = {
		gui = screenGui,
		tabs = {},
		activeTab = nil
	}

	function self:createFrame(properties)
		local frame = Instance.new("Frame")
		for prop, value in pairs(properties) do
			frame[prop] = value
		end
		frame.Parent = self.gui
		return frame
	end

	function self:createTab(tabName)
		if self.tabs[tabName] then
			warn("Tab '" .. tabName .. "' already exists.")
			return
		end

		local tabFrame = Instance.new("Frame")
		tabFrame.Name = tabName
		tabFrame.Size = UDim2.new(0.2, 0, 1, 0)
		tabFrame.Parent = self.gui

		local contentFrame = Instance.new("ScrollingFrame")
		contentFrame.Name = "Content"
		contentFrame.Size = UDim2.new(0.8, 0, 1, 0)
		contentFrame.Position = UDim2.new(0.2, 0, 0, 0)
		contentFrame.Parent = self.gui
		contentFrame.Visible = false

		self.tabs[tabName] = {
			tabButton = tabFrame,
			content = contentFrame,
			elements = {}
		}

		if not self.activeTab then
			self.activeTab = tabName
			contentFrame.Visible = true
		end

		return self.tabs[tabName]
	end

	function self:selectTab(tabName)
		if not self.tabs[tabName] then
			warn("Tab '" .. tabName .. "' does not exist.")
			return
		end
		
		-- Hide all other tabs
		for _, tabData in pairs(self.tabs) do
			tabData.content.Visible = false
		end

		-- Show the selected tab
		self.tabs[tabName].content.Visible = true
		self.activeTab = tabName
	end

	function self:addToggle(tabName, properties, callback)
		local tab = self.tabs[tabName]
		if not tab then
			warn("Tab '" .. tabName .. "' not found.")
			return
		end

		local toggleButton = Instance.new("TextButton")
		for prop, value in pairs(properties) do
			toggleButton[prop] = value
		end
		toggleButton.Parent = tab.content

		local state = false
		toggleButton.MouseButton1Click:Connect(function()
			state = not state
			if callback then
				callback(state)
			end
			-- Update UI based on state
			toggleButton.BackgroundColor3 = state and Color3.fromRGB(81, 255, 0) or Color3.fromRGB(255, 0, 0)
		end)

		return toggleButton
	end

	function self:addTextBox(tabName, properties, callback)
		local tab = self.tabs[tabName]
		if not tab then
			warn("Tab '" .. tabName .. "' not found.")
			return
		end

		local textBox = Instance.new("TextBox")
		for prop, value in pairs(properties) do
			textBox[prop] = value
		end
		textBox.Parent = tab.content

		textBox.FocusLost:Connect(function(enterPressed)
			if enterPressed and callback then
				callback(textBox.Text)
			end
		end)

		return textBox
	end

	function self:destroy()
		self.gui:Destroy()
	end

	return self
end

return library
